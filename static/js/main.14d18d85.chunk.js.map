{"version":3,"sources":["config/config.js","iconImageNotFound.png","classes/titleInfo.js","logic/getSeriesListByTitle.js","logic/getSeriesIdByTitle.js","components/searchBar.jsx","components/cellEpisode.jsx","components/panelEpisodes.jsx","components/loadingSpinner.jsx","components/utilityBar.jsx","classes/episodeInfo.js","logic/getEpisodesFromID.js","classes/seriesInfo.js","logic/getSeriesInfoFromID.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","omdbApiKey","tmdbApiKey","TitleInfo","idImdb","title","years","imageLink","this","prototype","toString","getSeriesListByTitle","a","titleEncoded","encodeURI","urlTmdb","config","fetch","responseTitles","json","dataTitles","listSeries","results","i","length","series","id","name","first_air_date","substring","poster_path","push","slice","getSeriesIdByTitle","titleWithoutSpaces","replace","urlOmdb","response","data","Response","Search","imdbID","Title","Year","Poster","SearchBar","props","state","text","suggestions","showSuggestions","handleFocus","event","setState","handleBlur","handleTextChange","bind","cancelSearch","className","onBlur","onFocus","style","autoFocus","ref","input","searchInput","type","placeholder","onChange","value","IconButton","onClick","width","height","float","fontSize","renderSuggestion","focus","target","toLowerCase","index","selectedSuggestion","onSearch","map","item","onMouseDown","handleClick","key","src","iconImageNotFound","alt","Component","CellEpisode","setBackgroundColorRating","rotated","renderEpisodeCell","href","episodeInfo","link","rel","getTitleValue","countVisible","rating","getRatingCountValue","season","number","ratingCount","PanelEpisodes","renderEpisodesSeasons","nextProps","nextState","rotate","episodesList","onLoad","console","log","getClassName","renderHeader","renderSeason","vals","getMinMaxEpisodeNumber","min","max","rows","Infinity","s","episodeNr","Object","keys","renderEpisodes","episodes","sort","b","Math","floor","LoadingSpinner","loading","constants","UtilityBar","zoom","visible","baseHeight","baseWidth","pageWidth","divWidth","centerPanelX","zoomIn","zoomOut","rotateTable","episodesLoaded","handleZoom","handleCountVisibility","updateWindowDimensions","onChangeCountVisibility","onChangeZoom","onZoomIn","onZoomOut","onRotateTable","maxWidth","overflow","marginLeft","centerTable","marginTop","marginBottom","transform","React","cloneElement","children","scaleFactor","window","addEventListener","removeEventListener","panelPosX","document","getElementById","getBoundingClientRect","x","innerWidth","panelCenter","getHeightWidth","heightL","widthL","checked","newValue","IconsBar","color","display","PrettoSlider","valueLabelDisplay","orientation","withStyles","root","padding","thumb","backgroundColor","border","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","EpisodeInfo","year","airdate","getEpisodesFromID","idSeries","totalSeasons","url","listEpisodes","seas","urlSeason","ep","Episodes","episode","imdbRating","Released","Episode","SeriesInfo","genres","plot","rate","rateCount","getSeriesInfoFromID","Genre","Plot","imdbVotes","SeriesInfoCard","Card","CardMedia","classes","media","component","CardContent","Typography","variant","align","seriesInfo","App","collapse","pnlH","handleSearch","clickCollapse","handleResize","epsPromise","eps","image","margin","Collapse","in","onResize","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.14d18d85.chunk.js","sourcesContent":["module.exports = {\n    omdbApiKey: \"9d0c36f2\",\n    tmdbApiKey: \"879ebf306470ab454b8f25a2f8bd85ad\",\n};\n","module.exports = __webpack_public_path__ + \"static/media/iconImageNotFound.f15f4943.png\";","class TitleInfo {\n    constructor(idImdb, title, years, imageLink) {\n        this.idImdb = idImdb;\n        this.title = title;\n        this.years = years;\n        this.imageLink = imageLink;\n    }\n}\n\nTitleInfo.prototype.toString = function serieToString() {\n    var ret = `Id: ${this.idImdb}, ${this.title} (${this.years}) '${this.imageLink}'`;\n    return ret;\n};\n\nexport default TitleInfo;\n","import TitleInfo from \"../classes/titleInfo\";\nimport config from \"../config/config\";\n\nexport default async function getSeriesListByTitle(title) {\n    var titleEncoded = encodeURI(title);\n    const urlTmdb = `https://api.themoviedb.org/3/search/tv?api_key=${config.tmdbApiKey}&language=en-US&page=1&query=${titleEncoded}&include_adult=false`;\n    const responseTitles = await fetch(urlTmdb);\n    const dataTitles = await responseTitles.json();\n\n    var listSeries = [];\n\n    if (dataTitles && dataTitles.results && dataTitles.results) {\n        for (let i = 0; i < dataTitles.results.length; i++) {\n            var series = new TitleInfo(\n                dataTitles.results[i].id,\n                dataTitles.results[i].name,\n                dataTitles.results[i].first_air_date ? dataTitles.results[i].first_air_date.substring(0, 4) : \"N.A.\",\n                dataTitles.results[i].poster_path ? \"https://image.tmdb.org/t/p/w600_and_h900_bestv2\" + dataTitles.results[i].poster_path : \"\"\n            );\n            listSeries.push(series);\n        }\n    }\n\n    return listSeries.slice(0, 5);\n}\n","import TitleInfo from \"../classes/titleInfo\";\nimport config from \"../config/config\";\n\nexport default async function getSeriesIdByTitle(title) {\n    var titleWithoutSpaces = title.replace(/\\s/g, \"+\");\n    const urlOmdb = \"https://www.omdbapi.com/?type=series&apikey=\" + config.omdbApiKey + \"&s=\" + titleWithoutSpaces;\n    const response = await fetch(urlOmdb);\n    const data = await response.json();\n\n    if (data && data.Response === \"True\" && data.Search)\n        return new TitleInfo(data.Search[0].imdbID, data.Search[0].Title, data.Search[0].Year, data.Search[0].Poster !== \"N/A\" ? data.Search[0].Poster : \"\");\n}\n","import React, { Component } from \"react\";\nimport \"./searchBar.css\";\nimport getSeriesListByTitle from \"../logic/getSeriesListByTitle\";\nimport getSeriesIdByTitle from \"../logic/getSeriesIdByTitle\";\nimport iconImageNotFound from \"../iconImageNotFound.png\";\nimport { IconButton } from \"@material-ui/core\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\n\nclass SearchBar extends Component {\n    state = {\n        text: \"\",\n        suggestions: [],\n        showSuggestions: true,\n    };\n\n    constructor(props) {\n        super(props);\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.cancelSearch = this.cancelSearch.bind(this);\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\" onBlur={this.handleBlur} onFocus={this.handleFocus} style={this.props.style}>\n                <input\n                    autoFocus\n                    ref={(input) => {\n                        this.searchInput = input;\n                    }}\n                    type=\"text\"\n                    placeholder=\"Search TV show...\"\n                    onChange={this.handleTextChange}\n                    value={this.state.text}\n                />\n                <IconButton onClick={this.cancelSearch} style={{ width: 40, height: 40, float: \"right\" }}>\n                    <CancelIcon fontSize=\"small\" />\n                </IconButton>\n                {this.renderSuggestion()}\n            </div>\n        );\n    }\n\n    cancelSearch() {\n        this.setState({ text: \"\", suggestions: [], showSuggestions: false }, () => {\n            this.searchInput.focus();\n        });\n    }\n\n    handleFocus = (event) => {\n        this.setState({ showSuggestions: true });\n    };\n\n    handleBlur = (event) => {\n        this.setState({ showSuggestions: false });\n    };\n\n    async handleTextChange(event) {\n        this.setState({ text: event.target.value }, async () => {\n            if (this.state.text) {\n                var listSeries = await getSeriesListByTitle(this.state.text.toLowerCase());\n                if (listSeries) this.setState({ suggestions: listSeries });\n            } else {\n                this.setState({ suggestions: [] });\n            }\n        });\n    }\n\n    async handleClick(index) {\n        const { suggestions } = this.state;\n        var selectedSuggestion = await getSeriesIdByTitle(suggestions[index].title);\n        this.setState({\n            text: selectedSuggestion.title,\n        });\n        this.props.onSearch(selectedSuggestion /*.idImdb*/);\n    }\n\n    renderSuggestion() {\n        const { suggestions } = this.state;\n        const { showSuggestions } = this.state;\n        if (suggestions.length === 0 || !showSuggestions) {\n            return null;\n        }\n\n        return (\n            <ul>\n                {this.state.suggestions.map((item, i) => (\n                    <li onMouseDown={() => this.handleClick(i)} key={\"li\" + item.idImdb}>\n                        <div className=\"BasicContainer\">\n                            <img src={item.imageLink || iconImageNotFound} key={\"img\" + item.idImdb} alt={item.imageLink ? item.title : \"\"} />\n                            <div className=\"TitleContainer\">\n                                <h4>{`${item.title}`}</h4>\n                                <h5>{`${item.years}`}</h5>\n                            </div>\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n}\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport \"./cellEpisode.css\";\n\nclass CellEpisode extends Component {\n  render() {\n    return (\n      <td\n        className={\n          this.setBackgroundColorRating() +\n          (this.props.rotated ? \" cellRotated\" : \"\")\n        }\n      >\n        <div className=\"cellSquare\">{this.renderEpisodeCell()}</div>\n      </td>\n    );\n  }\n\n  renderEpisodeCell() {\n    var cell = (\n      <a\n        href={this.props.episodeInfo.link}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"noUnderline\"\n      >\n        <div title={this.getTitleValue()} className=\"cellContainer\">\n          <h6\n            className={this.props.countVisible ? \"rateLabel\" : \"rateLabelFull\"}\n          >\n            {this.props.episodeInfo.rating\n              ? this.props.episodeInfo.rating\n              : \"N.A\"}\n          </h6>\n          {this.props.countVisible ? (\n            <h6 className=\"rateCountLabel\">{this.getRatingCountValue()}</h6>\n          ) : (\n            <span />\n          )}\n        </div>\n      </a>\n    );\n\n    return cell;\n  }\n\n  getTitleValue() {\n    return `S${this.props.episodeInfo.season}, E${this.props.episodeInfo.number}, ${this.props.episodeInfo.title}`;\n  }\n\n  getRatingCountValue() {\n    var { ratingCount } = this.props.episodeInfo;\n    if (ratingCount) {\n      if (ratingCount.length > 3) {\n        return ratingCount.substring(0, 4) + \"k\";\n      } else {\n        return ratingCount;\n      }\n    } else {\n      return \"N.A.\";\n    }\n  }\n\n  setBackgroundColorRating() {\n    const { episodeInfo } = this.props;\n    const rating = episodeInfo.rating;\n    var className = \"\";\n\n    if (rating >= 8.6) {\n      //great\n      className = \"rateGreat\";\n    } else if (rating >= 7.6 && rating <= 8.5) {\n      //good\n      className = \"rateGood\";\n    } else if (rating >= 6.6 && rating <= 7.5) {\n      //regular\n      className = \"rateRegular\";\n    } else if (rating >= 5.0 && rating <= 6.5) {\n      //bad\n      className = \"rateBad\";\n    } else if (rating >= 0.1 && rating <= 4.9) {\n      //garbage\n      className = \"rateGarbage\";\n    } else {\n      //Invalid or unavailable data\n      className = \"rateUndefined\";\n    }\n\n    return className;\n  }\n}\n\nexport default CellEpisode;\n","import React, { Component } from \"react\";\nimport \"./panelEpisodes.css\";\nimport CellEpisode from \"./cellEpisode\";\n\nclass PanelEpisodes extends Component {\n    render() {\n        return this.renderEpisodesSeasons();\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (\n            this.props.rotate === nextProps.rotate &&\n            this.props.episodesList != null &&\n            this.props.episodesList === nextProps.episodesList &&\n            this.props.countVisible === nextProps.countVisible\n        ) {\n            return false;\n        } else {\n            if (this.props.episodesList !== nextProps.episodesList) {\n                this.props.onLoad();\n            }\n            return true;\n        }\n    }\n\n    renderEpisodesSeasons() {\n        const { episodesList } = this.props;\n        console.log(\"episodesList\", episodesList);\n        if (!episodesList || episodesList.length === 0) {\n            return <h1> </h1>;\n        } else {\n            var table = (\n                <table id={this.props.id} className={this.getClassName()}>\n                    <thead>\n                        <tr>{this.renderHeader()}</tr>\n                    </thead>\n                    <tbody>{this.renderSeason()}</tbody>\n                </table>\n            );\n            return table;\n        }\n    }\n\n    getClassName() {\n        return this.props.className ? this.props.className : \"\";\n    }\n\n    renderHeader() {\n        var vals = this.getMinMaxEpisodeNumber();\n        var min = vals[0];\n        var max = vals[1];\n\n        var rows = [];\n        rows.push(\n            <th key=\"ESHseparator\" className={this.props.rotate ? \"cellRotated\" : \"\"}>\n                <div className=\"cellSquare\" />\n            </th>\n        );\n        for (var i = min; i <= max; i++) {\n            rows.push(\n                <th key={\"EH\" + i} className={this.props.rotate ? \"cellRotated\" : \"\"}>\n                    <div className=\"cellSquare\">\n                        <h6 className=\"headerLabel\">E{i}</h6>\n                    </div>\n                </th>\n            );\n        }\n\n        return rows;\n    }\n\n    getMinMaxEpisodeNumber() {\n        const { episodesList } = this.props;\n        let max = -Infinity;\n        let min = 1;\n\n        for (let s in episodesList) {\n            let episodeNr = episodesList[s].length;\n            if (episodeNr > max) max = episodeNr;\n        }\n        return [min, max];\n    }\n\n    renderSeason() {\n        const { episodesList } = this.props;\n\n        const retVal = Object.keys(episodesList).map((season) => (\n            <tr key={season}>\n                <th key={\"S\" + season} className={this.props.rotate ? \"cellRotated\" : \"\"}>\n                    <div className=\"cellSquare\">\n                        <h6 className=\"headerLabel\">S{season}</h6>\n                    </div>\n                </th>\n                {this.renderEpisodes(this.props.episodesList[season])}\n            </tr>\n        ));\n\n        return retVal;\n    }\n\n    renderEpisodes(episodes) {\n        const episodesSorted = episodes.sort((a, b) => Math.floor(a.number) - Math.floor(b.number));\n\n        const retVal = episodesSorted.map((item) => (\n            <CellEpisode key={\"S\" + item.season + \"E\" + item.number} episodeInfo={item} rotated={this.props.rotate} countVisible={this.props.countVisible} />\n        ));\n\n        return retVal;\n    }\n}\n\nexport default PanelEpisodes;\n","import React, { Component } from \"react\";\nimport \"./loadingSpinner.css\";\n\nclass LoadingSpinner extends Component {\n    render() {\n        if (this.props.loading) {\n            return (\n                <div className=\"lds-container\">\n                    <div className=\"lds-ring\">\n                        <div />\n                        <div />\n                        <div />\n                        <div />\n                    </div>\n                </div>\n            );\n        } else return <span />;\n    }\n}\n\nexport default LoadingSpinner;\n","import React, { Component } from \"react\";\nimport \"./utilityBar.css\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { IconButton, Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\nimport ZoomInIcon from \"@material-ui/icons/ZoomIn\";\nimport ZoomOutIcon from \"@material-ui/icons/ZoomOut\";\n\nconst constants = {\n    maxZoom: 150,\n    minZoom: 50,\n    deltaHeight: 50,\n    defZoom: 100,\n};\n\nclass UtilityBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.zoomIn = this.zoomIn.bind(this);\n        this.zoomOut = this.zoomOut.bind(this);\n        this.rotateTable = this.rotateTable.bind(this);\n        this.episodesLoaded = this.episodesLoaded.bind(this);\n        this.handleZoom = this.handleZoom.bind(this);\n        this.handleCountVisibility = this.handleCountVisibility.bind(this);\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n    state = {\n        zoom: 100,\n        rotate: false,\n        visible: false,\n        baseHeight: 0,\n        baseWidth: 0,\n        pageWidth: 0,\n        divWidth: 0,\n        countVisible: false,\n        centerPanelX: 0,\n    };\n\n    render() {\n        return (\n            <div\n                id=\"tableContainer\"\n                className={\n                    //\"col-md-10 panelContainer\" + (this.state.visible ? \"\" : \" d-none\")\n                    \"col-md-10\" + (this.state.visible ? \"\" : \" d-none\") + (this.state.baseWidth > this.state.divWidth ? \" panelContainer\" : \"\")\n                }\n            >\n                <IconsBar\n                    className=\"d-none d-sm-none d-md-none d-lg-block d-xl-block\"\n                    style={{ float: \"left\", width: \"110px\" }}\n                    rotate={true}\n                    zoom={this.state.zoom}\n                    countVisible={this.state.countVisible}\n                    onChangeCountVisibility={this.handleCountVisibility}\n                    onChangeZoom={this.handleZoom}\n                    onZoomIn={this.zoomIn}\n                    onZoomOut={this.zoomOut}\n                    onRotateTable={this.rotateTable}\n                />\n                <IconsBar\n                    className=\"d-block d-sm-block d-md-block d-lg-none d-xl-none\"\n                    style={{ float: \"left\", width: \"100%\", maxWidth: 600 }}\n                    rotate={false}\n                    zoom={this.state.zoom}\n                    countVisible={this.state.countVisible}\n                    onChangeCountVisibility={this.handleCountVisibility}\n                    onChangeZoom={this.handleZoom}\n                    onZoomIn={this.zoomIn}\n                    onZoomOut={this.zoomOut}\n                    onRotateTable={this.rotateTable}\n                />\n                <div\n                    id=\"centerPanel\"\n                    style={{\n                        width: `calc(100% - ${this.state.pageWidth > 992 ? 110 : 0}px)`,\n                        overflow: \"auto hidden\",\n                    }}\n                >\n                    <div\n                        style={{\n                            height: this.state.baseHeight,\n                            width: this.state.baseWidth,\n                            marginLeft: this.centerTable(),\n                            marginTop: \"50px\",\n                            marginBottom: \"50px\",\n                        }}\n                    >\n                        <div\n                            className=\"transformContainer\"\n                            style={{\n                                width: `calc(100% / ${this.state.zoom / 100})`,\n                                transform: `scale(${this.state.zoom / 100}) ` + (this.state.rotate ? \" scaleX(-1) rotate(90deg)\" : \"\"),\n                            }}\n                        >\n                            {React.cloneElement(this.props.children, {\n                                scaleFactor: this.state.zoom / 100,\n                                rotate: this.state.rotate,\n                                onLoad: this.episodesLoaded,\n                                countVisible: this.state.countVisible,\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        var panelPosX = document.getElementById(\"centerPanel\").getBoundingClientRect().x;\n\n        this.setState({ pageWidth: window.innerWidth, centerPanelX: panelPosX });\n    }\n\n    centerTable() {\n        var pageCenter = this.state.pageWidth / 2;\n        var tableCenter = this.state.baseWidth / 2;\n        var panelCenter = pageCenter - tableCenter - this.state.centerPanelX;\n\n        return panelCenter > 0 ? panelCenter : 0;\n    }\n\n    episodesLoaded() {\n        this.setState(\n            {\n                visible: true,\n            },\n            () => this.getHeightWidth()\n        );\n    }\n\n    getHeightWidth() {\n        var heightL = document.getElementById(this.props.children.props.id).getBoundingClientRect().height;\n        var widthL = document.getElementById(this.props.children.props.id).getBoundingClientRect().width;\n        var panelPosX = document.getElementById(\"centerPanel\").getBoundingClientRect().x;\n        this.setState({\n            baseWidth: widthL,\n            baseHeight: heightL,\n            centerPanelX: panelPosX,\n        });\n    }\n\n    handleCountVisibility(event) {\n        this.setState({ countVisible: event.target.checked });\n    }\n\n    handleZoom(event, newValue) {\n        this.setState({ zoom: Math.floor(newValue) }, () => this.getHeightWidth());\n    }\n\n    zoomIn() {\n        const { zoom } = this.state;\n        if (zoom < constants.maxZoom) this.setState({ zoom: zoom + 5 }, () => this.getHeightWidth());\n    }\n\n    zoomOut() {\n        const { zoom } = this.state;\n        if (zoom > constants.minZoom) this.setState({ zoom: zoom - 5 }, () => this.getHeightWidth());\n    }\n\n    rotateTable() {\n        const { rotate } = this.state;\n        this.setState({ rotate: !rotate }, () => this.getHeightWidth());\n    }\n}\n\nconst IconsBar = ({ className, style, rotate, zoom, countVisible, onChangeCountVisibility, onChangeZoom, onZoomIn, onZoomOut, onRotateTable }) => {\n    return (\n        <div className={className} style={style}>\n            <IconButton type=\"button\" onClick={onRotateTable} style={{ color: \"black\" }}>\n                <AutorenewIcon />\n            </IconButton>\n            {rotate && <br />}\n            <IconButton onClick={rotate ? onZoomIn : onZoomOut}>\n                {rotate ? <ZoomInIcon style={{ color: \"black\" }} /> : <ZoomOutIcon style={{ color: \"black\" }} />}\n            </IconButton>\n            {rotate && <br />}\n            <div\n                style={{\n                    width: rotate ? \"\" : 150,\n                    height: rotate ? 200 : \"\",\n                    display: rotate ? \"\" : \"inline-block\",\n                }}\n            >\n                <PrettoSlider\n                    valueLabelDisplay=\"auto\"\n                    orientation={rotate ? \"vertical\" : \"horizontal\"}\n                    value={zoom || constants.defZoom}\n                    onChange={onChangeZoom}\n                    min={constants.minZoom}\n                    max={constants.maxZoom}\n                    id=\"sliderZoom\"\n                />\n            </div>\n            <IconButton onClick={rotate ? onZoomOut : onZoomIn}>\n                {rotate ? <ZoomOutIcon style={{ color: \"black\" }} /> : <ZoomInIcon style={{ color: \"black\" }} />}\n            </IconButton>\n        </div>\n    );\n};\n\nconst PrettoSlider = withStyles({\n    root: {\n        color: \"#52af77\",\n        padding: \"6px 0\",\n    },\n    thumb: {\n        height: 24,\n        width: 24,\n        backgroundColor: \"#fff\",\n        border: \"2px solid currentColor\",\n        marginTop: -11, //-8,\n        marginLeft: \"-11px !important\",\n        transform: \"rotate(90deg) !important\",\n        \"&:focus, &:hover, &$active\": {\n            boxShadow: \"inherit\",\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: \"auto\",\n    },\n    track: {\n        height: 2,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 2,\n        borderRadius: 4,\n    },\n})(Slider);\n\nexport default UtilityBar;\n","class EpisodeInfo {\n    constructor(title, link, imageLink, rating, ratingCount, year, number, season) {\n        this.title = title;\n        this.link = link;\n        this.imageLink = imageLink;\n        this.rating = rating;\n        this.ratingCount = ratingCount;\n        this.year = year;\n        this.number = number;\n        this.season = season;\n    }\n}\n\nEpisodeInfo.prototype.toString = function episodeToString() {\n    var ret = `S${this.season}, Ep${this.number}, Date ${this.airdate} ${this.rating} : '${this.title}'`;\n    return ret;\n};\n\nexport default EpisodeInfo;\n","import EpisodeInfo from \"../classes/episodeInfo\";\nimport config from \"../config/config\";\n\nexport default async function getEpisodesFromID(idSeries, totalSeasons) {\n    const url = \"https://www.omdbapi.com/?apikey=\" + config.omdbApiKey + \"&i=\" + idSeries + \"&Season=\";\n    console.log(\"totalSeasons\", totalSeasons);\n    var listEpisodes = {};\n    for (let seas = 1; seas <= totalSeasons; seas++) {\n        const urlSeason = url + seas;\n        const response = await fetch(urlSeason);\n        console.log(\"urlSeason\", urlSeason);\n        const data = await response.json();\n        console.log(\"data\", data);\n        if (data.Response === \"True\") {\n            for (let ep = 0; ep < data.Episodes.length; ep++) {\n                var episode = new EpisodeInfo(\n                    data.Episodes[ep].Title,\n                    \"https://www.imdb.com/title/\" + data.Episodes[ep].imdbID,\n                    \"\", //data.Episodes[ep].Poster,\n                    data.Episodes[ep].imdbRating,\n                    0, //data.Episodes[i].imdbVotes\n                    data.Episodes[ep].Released.substring(0, 4),\n                    data.Episodes[ep].Episode,\n                    seas\n                );\n                if (!listEpisodes[episode.season]) listEpisodes[episode.season] = [episode];\n                else listEpisodes[episode.season].push(episode);\n            }\n        }\n    }\n\n    return listEpisodes;\n}\n","class SeriesInfo {\n    constructor(idImdb, genres, plot, rate, rateCount, totalSeasons) {\n        this.idImdb = idImdb;\n        this.genres = genres;\n        this.plot = plot;\n        this.rate = rate;\n        this.rateCount = rateCount;\n        this.totalSeasons = totalSeasons;\n    }\n}\n\nexport default SeriesInfo;\n","import SeriesInfo from \"../classes/seriesInfo\";\nimport config from \"../config/config\";\n\nexport default async function getSeriesInfoFromID(idSeries) {\n    const url = \"https://www.omdbapi.com/?apikey=\" + config.omdbApiKey + \"&i=\" + idSeries;\n    const response = await fetch(url);\n    const data = await response.json();\n    var series = new SeriesInfo(data.Title, data.Genre, data.Plot, data.imdbRating, data.imdbVotes, data.totalSeasons);\n    console.log(\"series\", series);\n    return series;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./components/searchBar\";\nimport PanelEpisodes from \"./components/panelEpisodes\";\nimport LoadingSpinner from \"./components/loadingSpinner\";\nimport UtilityBar from \"./components/utilityBar\";\nimport getEpisodesFromID from \"./logic/getEpisodesFromID\";\nimport getSeriesInfoFromID from \"./logic/getSeriesInfoFromID\";\nimport { Card, CardMedia, CardContent, Typography } from \"@material-ui/core\";\nimport iconImageNotFound from \"./iconImageNotFound.png\";\nimport Collapse from \"@material-ui/core/Collapse\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.clickCollapse = this.clickCollapse.bind(this);\n        this.handleResize = this.handleResize.bind(this);\n    }\n\n    state = {\n        series: null,\n        seriesInfo: null,\n        episodesList: [],\n        loading: false,\n        collapse: false,\n        pnlH: null,\n    };\n\n    async handleSearch(series) {\n        this.setState({ loading: true });\n\n        var seriesInfo = await getSeriesInfoFromID(series.idImdb);\n        var epsPromise = getEpisodesFromID(series.idImdb, seriesInfo.totalSeasons);\n\n        var eps = await epsPromise;\n        //var seriesInfo = await seriesInfoPromise;\n\n        this.setState({\n            episodesList: eps,\n            series: series,\n            seriesInfo: seriesInfo,\n            loading: false,\n        });\n    }\n\n    getImage() {\n        const { series } = this.state;\n        var image = \"\";\n\n        if (series) {\n            var imageLink = series.imageLink;\n            image = imageLink;\n            console.log(\"image\", image);\n        }\n\n        return image;\n    }\n\n    clickCollapse(event) {\n        this.setState({ collapse: !this.state.collapse });\n    }\n\n    handleResize(height) {\n        this.setState({ pnlH: height });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <LoadingSpinner loading={this.state.loading} />\n                <div className=\"row\" style={{ margin: 0 }}>\n                    <div className=\"col-md-4\" />\n                    <div className=\"col-md-4\">\n                        <SearchBar onSearch={this.handleSearch} style={{ marginTop: 20 }} />\n                    </div>\n                </div>\n\n                <div\n                    className=\"row\"\n                    style={{\n                        height: this.state.pnlH ? this.state.pnlH : \"\",\n                        margin: 0,\n                    }}\n                >\n                    <div className=\"col-md-2\">\n                        {this.state.series && (\n                            <button className=\"btn btn-primary d-sm-none\" style={{ margin: 20 }} onClick={this.clickCollapse}>\n                                {this.state.collapse ? \"Expand\" : \"Collapse\"}\n                            </button>\n                        )}\n                        <Collapse in={!this.state.collapse}>\n                            {this.state.series && <SeriesInfoCard series={this.state.series} seriesInfo={this.state.seriesInfo} />}\n                        </Collapse>\n                    </div>\n\n                    <UtilityBar onResize={this.handleResize}>\n                        <PanelEpisodes id=\"pnlEpisodes\" episodesList={this.state.episodesList} />\n                    </UtilityBar>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction SeriesInfoCard(props) {\n    return (\n        <Card>\n            <CardMedia\n                classes={{ media: \"seriesCover\" }}\n                component=\"img\"\n                src={props.series && (props.series.imageLink || iconImageNotFound)}\n                // alt={this.state.series != null ? this.state.series.title : \"\"}\n            />\n            <CardContent className=\"card-title\">\n                <Typography variant=\"body2\" align=\"left\" display=\"block\">\n                    <b>Genres: </b>\n                    {props.seriesInfo ? `${props.seriesInfo.genres}` : \"\"}\n                </Typography>\n                <Typography variant=\"body2\" align=\"left\" display=\"block\">\n                    <b>Rate: </b>\n                    {props.seriesInfo ? `${props.seriesInfo.rate}/10 (${props.seriesInfo.rateCount} votes)` : \"\"}\n                </Typography>\n                <Typography variant=\"body2\" align=\"left\" display=\"block\">\n                    <b>Plot: </b>\n                    {props.seriesInfo ? `${props.seriesInfo.plot}` : \"\"}\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}